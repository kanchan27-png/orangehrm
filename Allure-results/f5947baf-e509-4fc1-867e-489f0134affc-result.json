{"name": " Page Title Test Case", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: 'msedgedriver.exe' executable may have wrong permissions.", "trace": "self = <selenium.webdriver.edge.service.Service object at 0x000001F0E2C555D0>\npath = 'C:\\\\Users\\\\Anup Sir\\\\.cache\\\\selenium\\\\msedgedriver\\\\win64\\\\115.0.1901.203\\\\msedgedriver.exe'\n\n    def _start_process(self, path: str) -> None:\n        \"\"\"Creates a subprocess by executing the command provided.\n    \n        :param cmd: full command to execute\n        \"\"\"\n        cmd = [path]\n        cmd.extend(self.command_line_args())\n        close_file_descriptors = self.popen_kw.pop(\"close_fds\", system() != \"Windows\")\n        try:\n>           self.process = subprocess.Popen(\n                cmd,\n                env=self.env,\n                close_fds=close_file_descriptors,\n                stdout=self.log_output,\n                stderr=self.log_output,\n                stdin=PIPE,\n                creationflags=self.creation_flags,\n                **self.popen_kw,\n            )\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Anup Sir\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['C:\\\\Users\\\\Anup Sir\\\\.cache\\\\selenium\\\\msed...>\nargs = '\"C:\\\\Users\\\\Anup Sir\\\\.cache\\\\selenium\\\\msedgedriver\\\\win64\\\\115.0.1901.203\\\\msedgedriver.exe\" --port=52325'\nexecutable = None, preexec_fn = None, close_fds = False, pass_fds = ()\ncwd = None\nenv = environ({'TERM_SESSION_ID': '4cedecfc-2246-43b1-a5ce-98aba3a6bda9', 'COMMONPROGRAMW6432': 'C:\\\\Program Files\\\\Common F...T_XDIST_WORKER_COUNT': '2', 'PYTEST_CURRENT_TEST': 'testCases/test_login.py::Test_Login::test_page_title_001 (setup)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x000001F0E2C55E50>\ncreationflags = 0, shell = False, p2cread = Handle(564), p2cwrite = 17\nc2pread = -1, c2pwrite = Handle(852), errread = -1, errwrite = Handle(556)\nunused_restore_signals = True, unused_gid = None, unused_gids = None\nunused_uid = None, unused_umask = -1, unused_start_new_session = False\nunused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            if not executable:\n                # gh-101283: without a fully-qualified path, before Windows\n                # checks the system directories, it first looks in the\n                # application directory, and also the current directory if\n                # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                # to avoid executing unqualified \"cmd.exe\".\n                comspec = os.environ.get('ComSpec')\n                if not comspec:\n                    system_root = os.environ.get('SystemRoot', '')\n                    comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                    if not os.path.isabs(comspec):\n                        raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                if os.path.isabs(comspec):\n                    executable = comspec\n            else:\n                comspec = executable\n    \n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    PermissionError: [WinError 32] The process cannot access the file because it is being used by another process\n\nC:\\Users\\Anup Sir\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\subprocess.py:1538: PermissionError\n\nThe above exception was the direct cause of the following exception:\n\nbrowser = 'edge'\n\n    @pytest.fixture\n    def setup(browser):\n        if browser == \"chrome\":\n            driver = webdriver.Chrome()\n        elif browser == \"edge\":\n>           driver = webdriver.Edge()\n\ntestCases\\conftest.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:53: in __init__\n    self.service.start()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:105: in start\n    self._start_process(self._path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.service.Service object at 0x000001F0E2C555D0>\npath = 'C:\\\\Users\\\\Anup Sir\\\\.cache\\\\selenium\\\\msedgedriver\\\\win64\\\\115.0.1901.203\\\\msedgedriver.exe'\n\n    def _start_process(self, path: str) -> None:\n        \"\"\"Creates a subprocess by executing the command provided.\n    \n        :param cmd: full command to execute\n        \"\"\"\n        cmd = [path]\n        cmd.extend(self.command_line_args())\n        close_file_descriptors = self.popen_kw.pop(\"close_fds\", system() != \"Windows\")\n        try:\n            self.process = subprocess.Popen(\n                cmd,\n                env=self.env,\n                close_fds=close_file_descriptors,\n                stdout=self.log_output,\n                stderr=self.log_output,\n                stdin=PIPE,\n                creationflags=self.creation_flags,\n                **self.popen_kw,\n            )\n            logger.debug(f\"Started executable: `{self._path}` in a child process with pid: {self.process.pid}\")\n        except TypeError:\n            raise\n        except OSError as err:\n            if err.errno == errno.EACCES:\n>               raise WebDriverException(\n                    f\"'{os.path.basename(self._path)}' executable may have wrong permissions.\"\n                ) from err\nE               selenium.common.exceptions.WebDriverException: Message: 'msedgedriver.exe' executable may have wrong permissions.\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:221: WebDriverException"}, "start": 1692385603581, "stop": 1692385603581, "uuid": "56ded7ff-8545-45b2-8b3e-a1031f7c1228", "historyId": "37518f13d7d322a452692dcf9fa516e6", "testCaseId": "37518f13d7d322a452692dcf9fa516e6", "fullName": "testCases.test_login.Test_Login#test_page_title_001", "labels": [{"name": "story", "value": " This is story#1"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "Test_Login"}, {"name": "host", "value": "DESKTOP-D00UTT1"}, {"name": "thread", "value": "1816-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_login"}], "links": [{"type": "issue", "url": "ABC123", "name": "ABC123"}, {"type": "link", "url": "https://opensource-demo.orangehrmlive.com/", "name": "https://opensource-demo.orangehrmlive.com/"}]}